
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.Hashtable;
import java.util.Random;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author eduma
 */
public class MatrixInter extends javax.swing.JFrame {

    private int [][] matrixRand;
    private final int SIZE = 10;
    
    public MatrixInter() {
        initComponents();
        matrixRand = new int [SIZE][SIZE];
        SliderUmbral.setPaintTicks(true);
        SliderUmbral.setPaintLabels(true);
        textMin.requestFocus(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelMatrixRan = new javax.swing.JPanel();
        scrollPanelRan = new javax.swing.JScrollPane();
        textMatrixRan = new javax.swing.JTextArea();
        labelMatrRandom = new javax.swing.JLabel();
        PanelMatrixRes = new javax.swing.JPanel();
        labelMin = new javax.swing.JLabel();
        textMin = new javax.swing.JTextField();
        labelMax = new javax.swing.JLabel();
        textMax = new javax.swing.JTextField();
        SliderUmbral = new javax.swing.JSlider();
        labelDescr = new javax.swing.JLabel();
        labelUmbral = new javax.swing.JLabel();
        labelNameUmbral = new javax.swing.JLabel();
        labelTitle = new javax.swing.JLabel();
        labelCopy = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textMatrixRan.setColumns(20);
        textMatrixRan.setRows(5);
        textMatrixRan.setFocusable(false);
        scrollPanelRan.setViewportView(textMatrixRan);

        labelMatrRandom.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        labelMatrRandom.setText("Matriz filtrada ");

        javax.swing.GroupLayout PanelMatrixRanLayout = new javax.swing.GroupLayout(PanelMatrixRan);
        PanelMatrixRan.setLayout(PanelMatrixRanLayout);
        PanelMatrixRanLayout.setHorizontalGroup(
            PanelMatrixRanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelMatrixRanLayout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addGroup(PanelMatrixRanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelMatrixRanLayout.createSequentialGroup()
                        .addComponent(scrollPanelRan, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelMatrixRanLayout.createSequentialGroup()
                        .addComponent(labelMatrRandom, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(88, 88, 88))))
        );
        PanelMatrixRanLayout.setVerticalGroup(
            PanelMatrixRanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelMatrixRanLayout.createSequentialGroup()
                .addGap(0, 41, Short.MAX_VALUE)
                .addComponent(labelMatrRandom, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(scrollPanelRan, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );

        labelMin.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        labelMin.setText("Valor mínimo:");

        textMin.setToolTipText("Introduzca números enteros");
        textMin.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                textMinFocusLost(evt);
            }
        });
        textMin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textMinKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textMinKeyTyped(evt);
            }
        });

        labelMax.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        labelMax.setText("Valor máximo:");

        textMax.setToolTipText("Introduzca números enteros");
        textMax.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                textMaxFocusLost(evt);
            }
        });
        textMax.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textMaxKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textMaxKeyTyped(evt);
            }
        });

        SliderUmbral.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                SliderUmbralStateChanged(evt);
            }
        });

        labelDescr.setText("Deslice la barra para cambiar el umbral de filtrado");

        labelNameUmbral.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        labelNameUmbral.setText("Umbral:");

        javax.swing.GroupLayout PanelMatrixResLayout = new javax.swing.GroupLayout(PanelMatrixRes);
        PanelMatrixRes.setLayout(PanelMatrixResLayout);
        PanelMatrixResLayout.setHorizontalGroup(
            PanelMatrixResLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelMatrixResLayout.createSequentialGroup()
                .addGroup(PanelMatrixResLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelMatrixResLayout.createSequentialGroup()
                        .addGap(121, 121, 121)
                        .addComponent(labelNameUmbral)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelUmbral, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PanelMatrixResLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(PanelMatrixResLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(SliderUmbral, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(PanelMatrixResLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(labelDescr, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(PanelMatrixResLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PanelMatrixResLayout.createSequentialGroup()
                                        .addComponent(labelMax, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(textMax, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE))
                                    .addGroup(PanelMatrixResLayout.createSequentialGroup()
                                        .addComponent(labelMin, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(textMin)))))))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        PanelMatrixResLayout.setVerticalGroup(
            PanelMatrixResLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelMatrixResLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(PanelMatrixResLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelMin, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textMin, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(PanelMatrixResLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelMax)
                    .addComponent(textMax, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(PanelMatrixResLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelUmbral, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelNameUmbral, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(SliderUmbral, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelDescr)
                .addContainerGap(105, Short.MAX_VALUE))
        );

        labelTitle.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        labelTitle.setText("Matriz 10x10 de rango filtrada");

        labelCopy.setText("© Fernando Marcelo Alonso, Eduardo Maldonado Fernández");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(PanelMatrixRes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelCopy)
                        .addGap(81, 81, 81))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(PanelMatrixRan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(199, 199, 199)
                .addComponent(labelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(labelTitle)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(PanelMatrixRan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                        .addComponent(labelCopy, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(PanelMatrixRes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textMinKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textMinKeyReleased
        if (textMax.getText().length() > 0 && textMin.getText().length() > 0){
            if (getMax() > getMin()){
                SliderUmbral.setMaximum(getMax());
                SliderUmbral.setMinimum(getMin()-1); 
                setTickSlider();
                displayBaseMatrix();
            }
        }
    }//GEN-LAST:event_textMinKeyReleased

    private void textMaxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textMaxKeyReleased
        if (textMax.getText().length() > 0 && textMin.getText().length() > 0){
            if(getMax() > getMin()){
                SliderUmbral.setMinimum(getMin()-1);
                SliderUmbral.setMaximum(getMax());
                setTickSlider();
                displayBaseMatrix();
            }
        }
    }//GEN-LAST:event_textMaxKeyReleased

    private void SliderUmbralStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SliderUmbralStateChanged
        textMatrixRan.setText(matrixToString());
        labelUmbral.setText(Integer.toString(SliderUmbral.getValue()));
    }//GEN-LAST:event_SliderUmbralStateChanged

    private void textMinKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textMinKeyTyped
        controlErrors(textMin, evt);
    }//GEN-LAST:event_textMinKeyTyped

    private void textMaxKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textMaxKeyTyped
        controlErrors(textMax, evt);
    }//GEN-LAST:event_textMaxKeyTyped

    private void textMinFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textMinFocusLost
        controlNumbers();
    }//GEN-LAST:event_textMinFocusLost

    private void textMaxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textMaxFocusLost
        controlNumbers();
    }//GEN-LAST:event_textMaxFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MatrixInter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MatrixInter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MatrixInter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MatrixInter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MatrixInter().setVisible(true);
            }
        });
    }
    
    private void displayBaseMatrix(){
        if (textMax.getText().length() > 0 && textMin.getText().length() > 0){
            int max = getMax();
            int min = getMin();
            generateMatrix(max,min);
            textMatrixRan.setText(matrixToString());
        }
    }
    
    private String matrixToString() {
        String res = "";
        int umbral = SliderUmbral.getValue();
        for(int i=0; i<SIZE; i++){
            for(int j=0; j<SIZE; j++){
                if(matrixRand[i][j] > umbral){
                    res += matrixRand[i][j] + " ";
                }else{
                    res += "- ";
                }
            }
            res += '\n';
        }
        
        return res;
    }
            
    private void generateMatrix(int max, int min){
        Random rand = new Random();
        for(int i=0; i<SIZE; i++){
            for(int j=0; j<SIZE; j++){
                matrixRand[i][j] = rand.nextInt(max-min+1)+ min;
            }
        }
    }
    
    private void setTickSlider(){
        if((getMax() - getMin()+1) >= 10){
            setSliderTickLabel((int) Math.ceil(((double)(getMax() - getMin()+1)/10)));
            System.out.println(((double)(getMax() - getMin()+1)/10));
            SliderUmbral.setMajorTickSpacing(((int) Math.ceil(((double)(getMax() - getMin())+1)/10)));
        }else{
            setSliderTickLabel(1);
            SliderUmbral.setMajorTickSpacing(1);
        } 
        SliderUmbral.setValue(getMin()-1);
    }
    
    private void setSliderTickLabel(int space){
        Hashtable<Integer, JLabel> position = new Hashtable<Integer, JLabel>();
        for (int i =0; i <= Math.ceil((getMax() - getMin()+1)/space) ;i++ ){
            position.put((getMin()-1)+space*i, new JLabel(Integer.toString((getMin()-1)+space*i)));
        }
        SliderUmbral.setLabelTable(position);
    }
    
    
    private void controlErrors(javax.swing.JTextField field,java.awt.event.KeyEvent evt){
        char key = evt.getKeyChar();
        if(!Character.isDigit(key) && key != '-'){
            evt.consume();
        }        
    }
    
    private void controlNumbers(){
        if (textMax.getText().length() > 0 && textMin.getText().length() > 0){
            if (getMax() <= getMin()){
                JOptionPane.showMessageDialog(null, "El valor máximo tiene que ser mayor que el mínimo", "Valor incorrecto", JOptionPane.WARNING_MESSAGE);
            }
        }
    }
    
            
    public int getMax (){
       return Integer.parseInt(textMax.getText());
    }
    
    public int getMin(){
        return Integer.parseInt(textMin.getText());
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelMatrixRan;
    private javax.swing.JPanel PanelMatrixRes;
    private javax.swing.JSlider SliderUmbral;
    private javax.swing.JLabel labelCopy;
    private javax.swing.JLabel labelDescr;
    private javax.swing.JLabel labelMatrRandom;
    private javax.swing.JLabel labelMax;
    private javax.swing.JLabel labelMin;
    private javax.swing.JLabel labelNameUmbral;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JLabel labelUmbral;
    private javax.swing.JScrollPane scrollPanelRan;
    private javax.swing.JTextArea textMatrixRan;
    private javax.swing.JTextField textMax;
    private javax.swing.JTextField textMin;
    // End of variables declaration//GEN-END:variables
}
